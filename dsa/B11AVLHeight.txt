/*
PROBLEM STATEMENT:

Dictionary  stores  keywords  &  its  meanings.  Provide  facility  for  adding  new  keywords, deleting keywords, updating values of any entry.
Also,display whole data sorted in ascending or descending order.
Find how many maximum comparisons may require for finding any keyword. Use height balance tree and find the complexity for finding a keyword.

*/

#include <iostream>
#include <string.h>
using namespace std;
class dict
{
	dict *root, *node, *left, *right, *tree1;
	string s1, s2;
	int flag, flag1, flag2, flag3, cmp;

public:
	dict()
	{
		flag = 0, flag1 = 0, flag2 = 0, flag3 = 0, cmp = 0;
		root = NULL;
	}
	void input();
	void create_root(dict *, dict *);
	void check_same(dict *, dict *);
	void input_display();
	void display(dict *);
	void input_remove();
	dict *remove(dict *, string);
	dict *findmin(dict *);
	void input_find();
	dict *find(dict *, string);
	void input_update();
	dict *update(dict *, string);
};

void dict::input()
{
	node = new dict;
	cout << "\nEnter the keyword:\n";
	cin >> node->s1;
	cout << "Enter the meaning of the keyword:\n";
	cin.ignore();
	getline(cin, node->s2);
	create_root(root, node);
}

void dict::create_root(dict *tree, dict *node1)
{
	int i = 0, result;
	char a[20], b[20];
	if (root == NULL)
	{
		root = new dict;
		root = node1;
		root->left = NULL;
		root->right = NULL;
		cout << "\nRoot node created successfully" << endl;
		return;
	}
	for (i = 0; node1->s1[i] != '\0'; i++)
	{
		a[i] = node1->s1[i];
	}
	for (i = 0; tree->s1[i] != '\0'; i++)
	{
		b[i] = tree->s1[i];
	}
	result = strcmp(b, a);
	check_same(tree, node1);
	if (flag == 1)
	{
		cout << "The word you entered already exists.\n";
		flag = 0;
	}
	else
	{
		if (result > 0)
		{
			if (tree->left != NULL)
			{
				create_root(tree->left, node1);
			}
			else
			{
				tree->left = node1;
				(tree->left)->left = NULL;
				(tree->left)->right = NULL;
				cout << "Node added to left of " << tree->s1 << "\n";
				return;
			}
		}
		else if (result < 0)
		{
			if (tree->right != NULL)
			{
				create_root(tree->right, node1);
			}
			else
			{
				tree->right = node1;
				(tree->right)->left = NULL;
				(tree->right)->right = NULL;
				cout << "Node added to right of " << tree->s1 << "\n";
				return;
			}
		}
	}
}

void dict::check_same(dict *tree, dict *node1)
{
	if (tree->s1 == node1->s1)
	{
		flag = 1;
		return;
	}
	else if (tree->s1 > node1->s1)
	{
		if (tree->left != NULL)
		{
			check_same(tree->left, node1);
		}
	}
	else if (tree->s1 < node1->s1)
	{
		if (tree->right != NULL)
		{
			check_same(tree->right, node1);
		}
	}
}

void dict::input_display()
{
	if (root != NULL)
	{
		cout << "The words entered in the dictionary are:\n\n";
		display(root);
	}
	else
	{
		cout << "\nThere are no words in the dictionary.\n";
	}
}

void dict::display(dict *tree)
{
	if (tree->left == NULL && tree->right == NULL)
	{
		cout << tree->s1 << " = " << tree->s2 << "\n\n";
	}
	else
	{
		if (tree->left != NULL)
		{
			display(tree->left);
		}
		cout << tree->s1 << " = " << tree->s2 << "\n\n";
		if (tree->right != NULL)
		{
			display(tree->right);
		}
	}
}

void dict::input_remove()
{
	char t;
	if (root != NULL)
	{
		cout << "\nEnter a keyword to be deleted:\n";
		cin >> s1;
		remove(root, s1);
		if (flag1 == 0)
		{
			cout << "\nThe word '" << s1 << "' has been deleted.\n";
		}
		flag1 = 0;
	}
	else
	{
		cout << "\nThere are no words in the dictionary.\n";
	}
}

dict *dict::remove(dict *tree, string s3)
{
	dict *temp;
	if (tree == NULL)
	{
		cout << "\nWord not found.\n";
		flag1 = 1;
		return tree;
	}
	else if (tree->s1 > s3)
	{
		tree->left = remove(tree->left, s3);
		return tree;
	}
	else if (tree->s1 < s3)
	{
		tree->right = remove(tree->right, s3);
		return tree;
	}
	else
	{
		if (tree->left == NULL && tree->right == NULL)
		{
			delete tree;
			tree = NULL;
		}
		else if (tree->left == NULL)
		{
			temp = tree;
			tree = tree->right;
			delete temp;
		}
		else if (tree->right == NULL)
		{
			temp = tree;
			tree = tree->left;
			delete temp;
		}
		else
		{
			temp = findmin(tree->right);
			tree = temp;
			tree->right = remove(tree->right, temp->s1);
		}
	}
	return tree;
}

dict *dict::findmin(dict *tree)
{
	while (tree->left != NULL)
	{
		tree = tree->left;
	}
	return tree;
}

void dict::input_find()
{
	flag2 = 0, cmp = 0;
	if (root != NULL)
	{
		cout << "\nEnter the keyword to be searched:\n";
		cin >> s1;
		find(root, s1);
		if (flag2 == 0)
		{
			cout << "Number of comparisons needed: " << cmp << "\n";
			cmp = 0;
		}
	}
	else
	{
		cout << "\nThere are no words in the dictionary.\n";
	}
}

dict *dict::find(dict *tree, string s3)
{
	if (tree == NULL)
	{
		cout << "\nWord not found.\n";
		flag2 = 1;
		flag3 = 1;
		cmp = 0;
	}
	else
	{
		if (tree->s1 == s3)
		{
			cmp++;
			cout << "\nWord found.\n";
			cout << tree->s1 << ": " << tree->s2 << "\n";
			tree1 = tree;
			return tree;
		}
		else if (tree->s1 > s3)
		{
			cmp++;
			find(tree->left, s3);
		}
		else if (tree->s1 < s3)
		{
			cmp++;
			find(tree->right, s3);
		}
	}
	return tree;
}

void dict::input_update()
{
	if (root != NULL)
	{
		cout << "\nEnter the keyword to be updated:\n";
		cin >> s1;
		update(root, s1);
	}
	else
	{
		cout << "\nThere are no words in the dictionary.\n";
	}
}

dict *dict::update(dict *tree, string s3)
{
	flag3 = 0;
	find(tree, s3);
	if (flag3 == 0)
	{
		cout << "\nEnter the updated meaning of the keyword:\n";
		cin.ignore();
		getline(cin, tree1->s2);
		cout << "\nThe meaning of '" << s3 << "' has been updated.\n";
	}
	return tree;
}

int main()
{
	int ch;
	dict d;
	do
	{
		cout << "\n==========================================\n"
				"\n********DICTIONARY***********:\n"
				"\nEnter your choice:\n"
				"1.Add new keyword.\n"
				"2.Display the contents of the Dictionary.\n"
				"3.Delete a keyword.\n"
				"4.Find a keyword.\n"
				"5.Update the meaning of a keyword.\n"
				"6.Exit.\n"
				"===============================================\n";
		cin >> ch;
		switch (ch)
		{
		case 1:
			d.input();
			break;
		case 2:
			d.input_display();
			break;
		case 3:
			d.input_remove();
			break;
		case 4:
			d.input_find();
			break;
		case 5:
			d.input_update();
			break;
		default:
			cout << "\nPlease enter a valid option!\n";
			break;
		}
	} while (ch != 6);
	return 0;
}

/*
#include <iostream>
#include <stdio.h>
#include <string.h>
using namespace std;

class Tree
{
    typedef struct node
    {
        char key[10];
        char meaning[10];
        struct node *left;
        struct node *right;
    } btree;

public:
    btree *New, *root;
    Tree();
    void create();
    void insert(btree *root, btree *New);
    void inorder();
    void inorder_rec(btree *root);
    void postorder();
    void postorder_rec(btree *root);
    btree *search(btree *root, const char *key); // Search function
    btree *deleteNode(btree *root, const char *key); // Delete function
    btree *findMin(btree *root); // Helper for delete function
};

Tree::Tree()
{
    root = NULL;
}

void Tree::inorder()
{
    inorder_rec(root);
}

void Tree::inorder_rec(btree *root)
{
    if (root != NULL)
    {
        inorder_rec(root->left);
        cout << "\n\t" << root->key << "\t" << root->meaning;
        inorder_rec(root->right);
    }
}

void Tree::postorder()
{
    postorder_rec(root);
}

void Tree::postorder_rec(btree *root)
{
    if (root != NULL)
    {
        postorder_rec(root->right);
        cout << "\n\t" << root->key << "\t" << root->meaning;
        postorder_rec(root->left);
    }
}

void Tree::create()
{
    New = new btree;
    New->left = New->right = NULL;
    cout << "\n\tEnter the Keyword: ";
    cin >> New->key;
    cout << "\n\tEnter the Meaning of " << New->key << " : ";
    cin >> New->meaning;
    if (root == NULL)
    {
        root = New;
    }
    else
    {
        insert(root, New);
    }
}

void Tree::insert(btree *root, btree *New)
{
    if (strcmp(root->key, New->key) > 0)
    {
        if (root->left == NULL)
            root->left = New;
        else
            insert(root->left, New);
    }
    else
    {
        if (root->right == NULL)
            root->right = New;
        else
            insert(root->right, New);
    }
}

Tree::btree *Tree::search(btree *root, const char *key)
{
    if (root == NULL || strcmp(root->key, key) == 0)
        return root;

    if (strcmp(key, root->key) < 0)
        return search(root->left, key);
    else
        return search(root->right, key);
}

Tree::btree *Tree::deleteNode(btree *root, const char *key)
{
    if (root == NULL)
        return root;

    if (strcmp(key, root->key) < 0)
    {
        root->left = deleteNode(root->left, key);
    }
    else if (strcmp(key, root->key) > 0)
    {
        root->right = deleteNode(root->right, key);
    }
    else
    {
        if (root->left == NULL)
        {
            btree *temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == NULL)
        {
            btree *temp = root->left;
            delete root;
            return temp;
        }
        btree *temp = findMin(root->right);
        strcpy(root->key, temp->key);
        strcpy(root->meaning, temp->meaning);
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

Tree::btree *Tree::findMin(btree *root)
{
    while (root->left != NULL)
        root = root->left;
    return root;
}

int main()
{
    Tree tr;
    int ch;
    char ans;
    do
    {
        cout << "\n\t***** BST Operations *****";
        cout << "\n\t1. Create\n\t2. Display\n\t3. Search\n\t4. Delete\n\t5. Exit";
        cout << "\n\t.....Enter Your Choice: ";
        cin >> ch;
        switch (ch)
        {
        case 1:
            do
            {
                tr.create();
                cout << "......Do You Want To Continue: ";
                cin >> ans;
            } while (ans == 'y' || ans == 'Y');
            break;
        case 2:
            cout << "\n\t\t1. Ascending\n\t\t2. Descending\n\t\t.....Enter Your Choice: ";
            cin >> ch;
            cout << "\n\tKeyword\tMeaning";

            switch (ch)
            {
            case 1:
                tr.inorder();
                break;
            case 2:
                tr.postorder();
                break;
            }
            break;
        case 3:
            {
                char key[10];
                cout << "\n\tEnter the Keyword to Search: ";
                cin >> key;
                Tree::btree *result = tr.search(tr.root, key);
                if (result)
                    cout << "\n\tFound: " << result->key << " - " << result->meaning;
                else
                    cout << "\n\tKeyword not found.";
            }
            break;
        case 4:
            {
                char key[10];
                cout << "\n\tEnter the Keyword to Delete: ";
                cin >> key;
                tr.root = tr.deleteNode(tr.root, key);
                cout << "\n\tKeyword Deleted (if it existed).";
            }
            break;
        case 5:
            break;
        }
        cout << "\n\t\t..... Do You Want to Continue: ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');
}

*/

/* Example:
1. Create:
   Input: keyword = "apple", meaning = "fruit"
   Input: keyword = "banana", meaning = "fruit"
   Input: keyword = "cat", meaning = "animal"

2. Display (Ascending):
   Output: apple fruit, banana fruit, cat animal

3. Search:
   Input: "banana"
   Output: Found: banana - fruit

4. Delete:
   Input: "banana"
   Output: Keyword Deleted (if it existed).
*/
