/*
Given sequence k = k1 <k2 < ... < kn of n sorted keys, with a search probability
pi  for  each  key  ki . Build  the  Binary  search  tree  that  has  the  least  search  cost  given  the  access probability for each key.
*/

#include <iostream>
using namespace std;

void con_obst(void);
void print(int, int);
float a[20], b[20], wt[20][20], c[20][20];
int r[20][20], n;

int main()
{
	int i;
	cout << "\n****** PROGRAM FOR OBST ******\n";
	cout << "\nEnter the no. of nodes : ";
	cin >> n;
	cout << "\nEnter the probability for successful search :: ";
	cout << "\n————————————————\n";
	for (i = 1; i <= n; i++)
	{
		cout << "p[" << i << "]";
		cin >> a[i];
	}
	cout << "\nEnter the probability for unsuccessful search :: ";
	cout << "\n—————————————————\n";
	for (i = 0; i <= n; i++)
	{
		cout << "q[" << i << "]";
		cin >> b[i];
	}
	con_obst();
	print(0, n);
	cout << endl;
}
void con_obst(void)
{
	int i, j, k, l, min;
	for (i = 0; i < n; i++)
	{
		c[i][i] = 0.0;
		r[i][i] = 0;
		wt[i][i] = b[i];

		wt[i][i + 1] = b[i] + b[i + 1] + a[i + 1];
		c[i][i + 1] = b[i] + b[i + 1] + a[i + 1];
		r[i][i + 1] = i + 1;
	}

	c[n][n] = 0.0;
	r[n][n] = 0;
	wt[n][n] = b[n];

	for (i = 2; i <= n; i++)
	{
		for (j = 0; j <= n - i; j++)
		{
			wt[j][j + i] = b[j + i] + a[j + i] + wt[j][j + i - 1];
			c[j][j + i] = 9999;
			for (l = j + 1; l <= j + i; l++)
			{
				if (c[j][j + i] > (c[j][l - 1] + c[l][j + i]))
				{
					c[j][j + i] = c[j][l - 1] + c[l][j + i];
					r[j][j + i] = l;
				}
			}
			c[j][j + i] += wt[j][j + i];
		}
		cout << endl;
	}
	cout << "\n\nOptimal BST is :: ";
	cout << "\nw[0][" << n << "] :: " << wt[0][n];
	cout << "\nc[0][" << n << "] :: " << c[0][n];
	cout << "\nr[0][" << n << "] :: " << r[0][n];
}
void print(int l1, int r1)
{
	if (l1 >= r1)
		return;
	if (r[l1][r[l1][r1] - 1] != 0)
		cout << "\n Left child of " << r[l1][r1] << " :: " << r[l1][r[l1][r1] - 1];
	if (r[r[l1][r1]][r1] != 0)
		cout << "\n Right child of " << r[l1][r1] << " :: " << r[r[l1][r1]][r1];
	print(l1, r[l1][r1] - 1);
	print(r[l1][r1], r1);
	return;
}

/*
#include <iostream>
using namespace std;

// Function declarations
void constructOptimalBST();
void printTree(int left, int right);

// Global variables
float successProb[20], failureProb[20], weight[20][20], cost[20][20];
int root[20][20], numKeys;


int main()
{
    int i;
    cout << "\n****** PROGRAM FOR OBST ******\n";
    cout << "\nEnter the number of keys: ";
    cin >> numKeys;

    cout << "\nEnter the probabilities for successful searches:\n";
    for (i = 1; i <= numKeys; i++)
    {
        cout << "P[" << i << "]: ";
        cin >> successProb[i];
    }

    cout << "\nEnter the probabilities for unsuccessful searches:\n";
    for (i = 0; i <= numKeys; i++)
    {
        cout << "Q[" << i << "]: ";
        cin >> failureProb[i];
    }

    constructOptimalBST();
    printTree(0, numKeys);

    return 0;
}


void constructOptimalBST()
{
    int i, left;
    for (i = 0; i < numKeys; i++)
    {
        cost[i][i] = 0.0;  // Cost for an empty tree
        root[i][i] = 0;
        weight[i][i] = failureProb[i];

        weight[i][i + 1] = failureProb[i] + failureProb[i + 1] + successProb[i + 1];
        cost[i][i + 1] = weight[i][i + 1];
        root[i][i + 1] = i + 1;
    }

    cost[numKeys][numKeys] = 0.0;
    root[numKeys][numKeys] = 0;
    weight[numKeys][numKeys] = failureProb[numKeys];

    for (int size = 2; size <= numKeys; size++) // Tree size
    {
        for (int start = 0; start <= numKeys - size; start++)
        {
            int end = start + size;
            weight[start][end] = weight[start][end - 1] + successProb[end] + failureProb[end];
            cost[start][end] = 9999.0; // Initialize with a large value

            for (left = start + 1; left <= end; left++)
            {
                float tempCost = cost[start][left - 1] + cost[left][end];
                if (cost[start][end] > tempCost)
                {
                    cost[start][end] = tempCost;
                    root[start][end] = left;
                }
            }
            cost[start][end] += weight[start][end];
        }
    }

    cout << "\nOptimal BST Cost is:";
    cout << "\nWeight[0][" << numKeys << "] = " << weight[0][numKeys];
    cout << "\nCost[0][" << numKeys << "] = " << cost[0][numKeys];
    cout << "\nRoot[0][" << numKeys << "] = " << root[0][numKeys];
}

void printTree(int left, int right)
{
    if (left >= right)
        return;

    if (root[left][root[left][right] - 1] != 0)
        cout << "\nLeft child of " << root[left][right] << " is: " << root[left][root[left][right] - 1];

    if (root[root[left][right]][right] != 0)
        cout << "\nRight child of " << root[left][right] << " is: " << root[root[left][right]][right];

    printTree(left, root[left][right] - 1);
    printTree(root[left][right], right);
}
*/