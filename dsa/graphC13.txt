#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
private:
    vector<vector<int>> adjList; // 2D vector to represent adjacency list
    int nodes;                   // Number of nodes in the graph

public:
    Graph(int n) {              // Constructor to initialize graph with 'n' nodes
        nodes = n;              // Stores the number of nodes
        adjList.resize(n);      // Resizes adjacency list to have 'n' empty lists
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v); // Adds 'v' to the adjacency list of 'u'
        adjList[v].push_back(u); // Adds 'u' to the adjacency list of 'v' (undirected graph)
    }

    void displayAdjList() {
        cout << "Adjacency List:\n";
        for (int i = 0; i < nodes; i++) {
            cout << i << " -> ";
            for (int neighbor : adjList[i]) {
                cout << neighbor << " ";
            }
            cout << endl;
        }
    }

    void DFS(int start) {
        vector<bool> visited(nodes, false);
        cout << "DFS Traversal: ";
        DFSUtil(start, visited);
        cout << endl;
    }

private:
    void DFSUtil(int node, vector<bool> &visited) {
        visited[node] = true;
        cout << node << " ";

        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

public:
    void BFS(int start) {
        vector<bool> visited(nodes, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "BFS Traversal: ";
        while (!q.empty()) {
            int current = q.front();
            q.pop();
            cout << current << " ";

            for (int neighbor : adjList[current]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << endl;
    }
};

int main() {
    int nodes, edges, choice;
    cout << "Enter the number of nodes: ";
    cin >> nodes;

    Graph g(nodes);

    do {
        cout << "\nGraph Operations Menu:\n";
        cout << "1. Add edges\n";
        cout << "2. Display adjacency list\n";
        cout << "3. Perform DFS\n";
        cout << "4. Perform BFS\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            cout << "Enter the number of edges: ";
            cin >> edges;

            cout << "Enter the edges (format: node1 node2):\n";
            for (int i = 0; i < edges; ++i) {
                int u, v;
                cin >> u >> v;
                g.addEdge(u, v);
            }
            break;
        }

        case 2:
            g.displayAdjList();
            break;

        case 3: {
            int start;
            cout << "Enter the starting node for DFS: ";
            cin >> start;
            g.DFS(start);
            break;
        }

        case 4: {
            int start;
            cout << "Enter the starting node for BFS: ";
            cin >> start;
            g.BFS(start);
            break;
        }

        case 5:
            cout << "Exiting program.\n";
            break;

        default:
            cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
